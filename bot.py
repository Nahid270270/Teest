import os
import threading
import asyncio
from flask import Flask, request, jsonify
from pyrogram import Client, filters
from pyrogram.types import Message
from dotenv import load_dotenv
import re
import traceback

# m3u8-To-MP4 рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рзБржи
import m3u8_To_MP4

# .env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржкрж░рж┐ржмрзЗрж╢ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ рж▓рзЛржб ржХрж░рзБржи
load_dotenv()

# --- Flask ржЕрзНржпрж╛ржк рж╕рзЗржЯржЖржк ---
app = Flask(__name__)

# --- Pyrogram ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ рж╕рзЗржЯржЖржк ---
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
DOWNLOAD_DIR = os.getenv("DOWNLOAD_DIR", "downloads") # ржбрж┐ржлрж▓рзНржЯ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐

# ржбрж╛ржЙржирж▓рзЛржб ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ рждрзИрж░рж┐ ржХрж░рзБржи ржпржжрж┐ ржирж╛ ржерж╛ржХрзЗ
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# Pyrogram ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ рждрзИрж░рж┐ ржХрж░рзБржи
bot = Client(
    "m3u8_downloader_bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# --- ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржлрж╛ржВрж╢ржи ---
async def download_m3u8_video(client: Client, message: Message, m3u8_url: str):
    status_message = None
    try:
        status_message = await message.reply_text("ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ... ржПржХржЯрзБ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред")

        file_name_match = re.search(r'[^/]+(?=\.(m3u8|M3U8))', m3u8_url)
        if file_name_match:
            # ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо ржкрж░рж┐рж╖рзНржХрж╛рж░ ржУ ржирж┐рж░рж╛ржкржж рж░рж╛ржЦрждрзЗ ржмрж┐рж╢рзЗрж╖ ржЕржХрзНрж╖рж░ ржмрж╛ржж ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ
            base_name = re.sub(r'[^\w\-_\.]', '', file_name_match.group(0))[:50]
        else:
            base_name = f"video_{os.urandom(4).hex()}"

        output_path = os.path.join(DOWNLOAD_DIR, f"{base_name}.mp4")

        await status_message.edit_text(f"ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб рж╣ржЪрзНржЫрзЗ: `{m3u8_url}`\nржПржЯрж┐ ржХрж┐ржЫрзБ рж╕ржоржпрж╝ ржирж┐рждрзЗ ржкрж╛рж░рзЗ... тП│")

        def _sync_download_task():
            try:
                # m3u8_To_MP4 ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи
                m3u8_To_MP4.download(m3u8_url, custom_file_name=output_path)
                return True
            except Exception as e:
                print(f"Error during m3u8 download with m3u8_To_MP4: {e}")
                traceback.print_exc()
                return False

        # ржПржХржЯрж┐ ржирждрзБржи ржерзНрж░рзЗржбрзЗ рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛рж╕ ржбрж╛ржЙржирж▓рзЛржб ржлрж╛ржВрж╢ржи ржЪрж╛рж▓рж╛ржи
        download_successful = await asyncio.to_thread(_sync_download_task)

        if download_successful and os.path.exists(output_path) and os.path.getsize(output_path) > 0:
            await status_message.edit_text("ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб рж╕ржорзНржкржирзНржи! ржПржЦржи ржЖржкрж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ... ЁЯУд")
            await message.reply_document(
                document=output_path,
                caption=f"**ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб рж╕ржорзНржкржирзНржи! тЬЕ**\n\nрж▓рж┐ржЩрзНржХ: `{m3u8_url}`"
            )
            os.remove(output_path)
            print(f"ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {output_path}")
        else:
            if status_message:
                await status_message.edit_text("ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗред рж▓рж┐ржВржХрзЗ рж╕ржорж╕рзНржпрж╛ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ ржЕржержмрж╛ рж╕рж╛рж░рзНржнрж╛рж░ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рждрзЗ ржкрж╛рж░рзЗржирж┐ред тЭМ")

    except Exception as e:
        error_message = f"ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛рж░ рж╕ржоржпрж╝ ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗ: {e}\n\n```python\n{traceback.format_exc()}\n```"
        print(f"ржбрж╛ржЙржирж▓рзЛржб ржлрж╛ржВрж╢ржирзЗ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐: {e}")
        traceback.print_exc()
        if status_message:
            await status_message.edit_text(error_message)

# --- Pyrogram ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---
@bot.on_message(filters.command("start") & filters.private)
async def start_command(client, message):
    await message.reply_text("ЁЯСЛ **рж╣рзНржпрж╛рж▓рзЛ!** ржЖржорж┐ ржПржХржЯрж┐ m3u8 ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржбрж╛рж░ ржмржЯред\n\nржЖржорж╛ржХрзЗ ржПржХржЯрж┐ **m3u8 рж▓рж┐ржВржХ** ржкрж╛ржарж╛ржи ржПржмржВ ржЖржорж┐ ржнрж┐ржбрж┐ржУржЯрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзЗ ржЖржкржирж╛ржХрзЗ ржкрж╛ржарж┐ржпрж╝рзЗ ржжрзЗржмред")

@bot.on_message(filters.text & filters.private)
async def handle_any_text_message(client, message: Message):
    m3u8_url = message.text.strip()

    if re.match(r'https?://.*\.(m3u8|M3U8)$', m3u8_url, re.IGNORECASE):
        await download_m3u8_video(client, message, m3u8_url)
    else:
        await message.reply_text("ЁЯдФ ржжрзБржГржЦрж┐ржд, ржПржЯрж┐ ржПржХржЯрж┐ ржмрзИржз m3u8 рж▓рж┐ржВржХ ржмрж▓рзЗ ржоржирзЗ рж╣ржЪрзНржЫрзЗ ржирж╛ред\n\nржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ **рж╕ржарж┐ржХ m3u8 рж▓рж┐ржВржХ** ржкрж╛ржарж╛ржиред")

# --- ржмржЯ ржЪрж╛рж▓рж╛ржирзЛрж░ ржлрж╛ржВрж╢ржи (ржЖрж▓рж╛ржжрж╛ ржерзНрж░рзЗржбрзЗ) ---
def run_bot_in_thread():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        print("Pyrogram ржмржЯ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ...")
        loop.run_until_complete(bot.start()) # bot.run() ржПрж░ ржмржжрж▓рзЗ bot.start()
        print("Pyrogram ржмржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗред")
        loop.run_forever() # ржЗржнрзЗржирзНржЯ рж▓рзБржкржХрзЗ ржЕржирж┐рж░рзНржжрж┐рж╖рзНржЯржХрж╛рж▓рзЗрж░ ржЬржирзНржп ржЪрж╛рж▓рзБ рж░рж╛ржЦржмрзЗ
    except Exception as e:
        print(f"ржмржЯ ржЪрж╛рж▓рж╛ржирзЛрж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐: {e}")
        traceback.print_exc()
    finally:
        # ржпржжрж┐ ржХрзЛржирзЛ ржХрж╛рж░ржгрзЗ рж▓рзБржк ржмржирзНржз рж╣ржпрж╝, ржмржЯржХрзЗржУ ржмржирзНржз ржХрж░рзБржи
        # bot.stop() ржХрзЗ async рж╣рждрзЗ рж╣ржпрж╝, рждрж╛ржЗ ржПржЯрж┐ ржПржЦрж╛ржирзЗ рж╕рж░рж╛рж╕рж░рж┐ ржХрж▓ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛
        # ржпржжрж┐ ржЖржкржирж╛рж░ ржмржЯржХрзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╢рж░рзНрждрзЗ ржерзНрж░рзЗржб ржерзЗржХрзЗ рж╕рзНржЯржк ржХрж░рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи рж╣ржпрж╝,
        # рждрж╛рж╣рж▓рзЗ ржПржХржЯрж┐ asyncronous рж╕рзНржЯржк рж╕рж┐ржЧржирж╛рж▓ ржорзЗржХрж╛ржирж┐ржЬржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗред
        loop.close()
        print("Pyrogram ржмржЯ ржмржирзНржз рж╣ржпрж╝рзЗржЫрзЗред")

# --- Flask рж░рзБржЯрж╕ ---
@app.route('/')
def home():
    return "ржЖржкржирж╛рж░ Pyrogram ржмржЯ ржПржмржВ Flask ржЕрзНржпрж╛ржк рж╕ржЪрж▓ ржЖржЫрзЗ! ржПржХржЯрж┐ m3u8 рж▓рж┐ржВржХ ржкрж╛ржарж╛ржиред"

@app.route('/health')
def health_check():
    return "OK", 200

# --- ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржПржирзНржЯрзНрж░рж┐ ржкржпрж╝рзЗржирзНржЯ ---
if __name__ == '__main__':
    # Pyrogram ржмржЯржХрзЗ ржПржХржЯрж┐ ржЖрж▓рж╛ржжрж╛ ржерзНрж░рзЗржбрзЗ ржЪрж╛рж▓рж╛ржи
    bot_thread = threading.Thread(target=run_bot_in_thread, daemon=True) # daemon=True ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ
    bot_thread.start()

    # Flask ржЕрзНржпрж╛ржк ржЪрж╛рж▓рж╛ржи
    port = int(os.getenv("PORT", 10000))
    print(f"Flask ржЕрзНржпрж╛ржк ржкрзЛрж░рзНржЯ {port} ржП ржЪрж▓ржЫрзЗ...")
    app.run(host='0.0.0.0', port=port)

