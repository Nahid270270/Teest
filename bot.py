from pyrogram import Client, filters
import requests
from bs4 import BeautifulSoup
import re
import os
from urllib.parse import urljoin
import subprocess
import logging
from requests.exceptions import Timeout, ConnectionError, RequestException

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s',
                    handlers=[
                        logging.FileHandler("bot.log"), # ‡¶≤‡¶ó ‡¶´‡¶æ‡¶á‡¶≤
                        logging.StreamHandler()        # ‡¶ï‡¶®‡¶∏‡ßã‡¶≤ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü
                    ])
logger = logging.getLogger(__name__)

# ‚ö†Ô∏è ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ API ID, API HASH ‡¶è‡¶¨‡¶Ç BOT_TOKEN ‡¶¨‡¶∏‡¶æ‡¶®
API_ID = 22697010           # üîÅ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ API ID
API_HASH = "fd88d7339b0371eb2a9501d523f3e2a7" # üîÅ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ API HASH
BOT_TOKEN = "7704954135:AAGtRtglQqHxzBmD-loFi6R11F19BbNFxx4" # üîÅ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶ü‡ßã‡¶ï‡ßá‡¶®

bot = Client("video_scraper_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

@bot.on_message(filters.command("getall") & filters.private)
def fetch_videos(client, message):
    user_id = message.from_user.id
    logger.info(f"‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ {user_id} ‡¶•‡ßá‡¶ï‡ßá /getall ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§: {message.text}")
    try:
        url = message.text.split(" ", 1)[1]
        if not url.startswith("http"):
            logger.warning(f"‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ {user_id} ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶¨‡ßà‡¶ß URL: {url}")
            return message.reply("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï URL ‡¶¶‡¶ø‡¶®‡•§ URL ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á 'http' ‡¶¨‡¶æ 'https' ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§")

        headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}
        
        logger.info(f"URL: {url} ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
        res = requests.get(url, headers=headers, timeout=15)
        res.raise_for_status() # HTTP ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø (‡¶Ø‡ßá‡¶Æ‡¶® 404, 500) ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
        
        soup = BeautifulSoup(res.text, "html.parser")

        video_links = []

        # <video src="">
        for video in soup.find_all("video"):
            src = video.get("src")
            if src:
                video_links.append(urljoin(url, src))

        # <source src="">
        for source in soup.find_all("source"):
            src = source.get("src")
            if src:
                video_links.append(urljoin(url, src))

        # <a href="..."> ‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡ßã .mp4/.webm ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø
        for a in soup.find_all("a", href=True):
            href = a['href']
            # re.IGNORECASE ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá ‡¶ï‡ßá‡¶∏ ‡¶∏‡¶Ç‡¶¨‡ßá‡¶¶‡¶®‡¶∂‡ßÄ‡¶≤ ‡¶®‡¶æ ‡¶π‡ßü
            if re.search(r'\.(mp4|webm|mkv|m3u8)$', href, re.IGNORECASE):
                video_links.append(urljoin(url, href))

        video_links = list(set(video_links))  # ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶¨‡¶æ‡¶¶

        if not video_links:
            logger.info(f"URL: {url} ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
            return message.reply("‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶è‡¶á ‡¶™‡ßÉ‡¶∑‡ßç‡¶†‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")

        message.reply(f"‚úÖ {len(video_links)}‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá, ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        logger.info(f"URL: {url} ‡¶•‡ßá‡¶ï‡ßá {len(video_links)}‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")

        for idx, v_url in enumerate(video_links):
            try:
                # ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶Ü‡¶ï‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï (‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡ßü)
                try:
                    head_res = requests.head(v_url, headers=headers, timeout=10)
                    file_size = int(head_res.headers.get('content-length', 0))
                    # ‡¶™‡ßç‡¶∞‡¶æ‡¶Ø‡¶º 2 GB ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
                    if file_size > 2000 * 1024 * 1024:
                        message.reply(f"‚ö†Ô∏è ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ({v_url}) ‡¶ñ‡ßÅ‡¶¨ ‡¶¨‡ßú ({file_size / (1024*1024*1024):.2f} GB), ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
                        logger.warning(f"‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ({v_url}) ‡¶ñ‡ßÅ‡¶¨ ‡¶¨‡ßú, ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã‡•§")
                        continue
                except Exception as e:
                    logger.warning(f"‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ({v_url}) ‡¶è‡¶∞ ‡¶Ü‡¶ï‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
                    # ‡¶Ü‡¶ï‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶æ ‡¶™‡¶æ‡¶∞‡¶≤‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá

                # M3U8 ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø yt-dlp ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
                if v_url.lower().endswith(".m3u8"): # .lower() ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá ‡¶ï‡ßá‡¶∏ ‡¶∏‡¶Ç‡¶¨‡ßá‡¶¶‡¶®‡¶∂‡ßÄ‡¶≤ ‡¶®‡¶æ ‡¶π‡ßü
                    filename = f"video_{idx+1}.mp4"
                    message.reply(f"üîÑ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} (M3U8) ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶è‡¶ü‡¶ø ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§")
                    logger.info(f"‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ({v_url}) M3U8 ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá yt-dlp ‡¶¶‡¶ø‡ßü‡ßá‡•§")
                    try:
                        # yt-dlp ‡¶¶‡¶ø‡ßü‡ßá M3U8 ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
                        subprocess.run(['yt-dlp', '-o', filename, v_url], check=True, capture_output=True, text=True)
                        message.reply_video(video=filename, caption=f"üé¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} (M3U8) ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®‡•§")
                        logger.info(f"‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ({v_url}) M3U8 ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ì ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶∏‡¶´‡¶≤‡•§")
                        os.remove(filename)
                    except subprocess.CalledProcessError as e:
                        logger.error(f"M3U8 ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ({v_url}) ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá yt-dlp ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e.stderr}", exc_info=True)
                        message.reply(f"‚ö†Ô∏è M3U8 ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e.stderr.splitlines()[-1] if e.stderr else e}")
                    continue # ‡¶™‡¶∞‡ßá‡¶∞ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶§‡ßá ‡¶Ø‡¶æ‡¶®

                # ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
                filename = f"video_{idx+1}.mp4"
                message.reply(f"üîÑ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ({v_url}) ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                logger.info(f"‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ({v_url}) ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
                r = requests.get(v_url, stream=True, timeout=30) # Timeout ‡¶¨‡¶æ‡ßú‡¶ø‡ßü‡ßá 30 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
                r.raise_for_status() # HTTP ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
                with open(filename, "wb") as f:
                    for chunk in r.iter_content(chunk_size=1024*1024): # 1MB chunks
                        if chunk: # ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ö‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá
                            f.write(chunk)

                message.reply_video(video=filename, caption=f"üé¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®‡•§")
                logger.info(f"‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ({v_url}) ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ì ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶∏‡¶´‡¶≤‡•§")
                os.remove(filename)

            except requests.exceptions.RequestException as e:
                logger.error(f"‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ({v_url}) ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}", exc_info=True)
                message.reply(f"‚ö†Ô∏è ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
            except Exception as e:
                logger.error(f"‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ({v_url}) ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}", exc_info=True)
                message.reply(f"‚ö†Ô∏è ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {idx+1} ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")

    except IndexError:
        logger.warning(f"‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ {user_id} ‡¶è‡¶ï‡¶ü‡¶ø URL ‡¶õ‡¶æ‡ßú‡¶æ /getall ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§")
        message.reply("‚ùå `/getall` ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶è‡¶ï‡¶ü‡¶ø URL ‡¶¶‡¶ø‡¶®‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®: `/getall https://example.com/videos`")
    except requests.exceptions.Timeout:
        logger.error(f"URL: {url} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶∏‡¶Æ‡ßü‡¶∏‡ßÄ‡¶Æ‡¶æ ‡¶Ö‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶Æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§", exc_info=True)
        message.reply("‚ùå ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶∏‡¶Æ‡ßü‡¶∏‡ßÄ‡¶Æ‡¶æ ‡¶Ö‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶Æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§ ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü‡¶ü‡¶ø ‡¶∏‡¶æ‡¶°‡¶º‡¶æ ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ ‡¶¨‡¶æ ‡¶ñ‡ßÅ‡¶¨ ‡¶ß‡ßÄ‡¶∞ ‡¶ó‡¶§‡¶ø‡¶§‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá‡•§")
    except requests.exceptions.ConnectionError:
        logger.error(f"URL: {url} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§", exc_info=True)
        message.reply("‚ùå ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá URL ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    except requests.exceptions.HTTPError as e:
        logger.error(f"URL: {url} ‡¶•‡ßá‡¶ï‡ßá HTTP ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e.response.status_code} - {e.response.reason}", exc_info=True)
        message.reply(f"‚ùå ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶•‡ßá‡¶ï‡ßá HTTP ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e.response.status_code} - {e.response.reason}")
    except RequestException as e:
        logger.error(f"URL: {url} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: {e}", exc_info=True)
        message.reply(f"‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: {e}")
    except Exception as e:
        logger.critical(f"URL: {url} (‡¶¨‡¶æ ‡¶§‡¶æ‡¶∞ ‡¶Ü‡¶∂‡ßá‡¶™‡¶æ‡¶∂‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£‡ßá) ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: {e}", exc_info=True)
        message.reply(f"‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: {e}")

bot.run()
