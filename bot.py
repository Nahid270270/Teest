import os
import threading
import asyncio
from flask import Flask, request, jsonify
from pyrogram import Client, filters
from pyrogram.types import Message
from dotenv import load_dotenv
import re
import traceback
import logging

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®
logging.basicConfig(level=logging.INFO, format='%(asctime)s | %(levelname)s | %(message)s')
logger = logging.getLogger(__name__)

# m3u8-To-MP4 ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
import m3u8_To_MP4

# .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂ ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
load_dotenv()

# --- Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ---
app = Flask(__name__)

# --- Pyrogram ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ---
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
DOWNLOAD_DIR = os.getenv("DOWNLOAD_DIR", "downloads")

# ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# Pyrogram ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏ ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤‡¶ø ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶¨‡ßá, ‡¶Ø‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶π‡¶¨‡ßá‡•§
# ‡¶è‡¶ü‡¶ø None ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
pyrogram_client = None

# --- ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
async def download_m3u8_video(client: Client, message: Message, m3u8_url: str):
    status_message = None
    try:
        status_message = await message.reply_text("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        logger.info(f"Received m3u8 URL: {m3u8_url}")

        file_name_match = re.search(r'[^/]+(?=\.(m3u8|M3U8))', m3u8_url)
        if file_name_match:
            base_name = re.sub(r'[^\w\-_\.]', '', file_name_match.group(0))[:50]
        else:
            base_name = f"video_{os.urandom(4).hex()}"

        output_path = os.path.join(DOWNLOAD_DIR, f"{base_name}.mp4")
        logger.info(f"Saving video to: {output_path}")

        await status_message.edit_text(f"‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá: `{m3u8_url}`\n‡¶è‡¶ü‡¶ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá... ‚è≥")

        def _sync_download_task():
            try:
                m3u8_To_MP4.download(m3u8_url, custom_file_name=output_path)
                return True
            except Exception as e:
                logger.error(f"Error during m3u8 download with m3u8_To_MP4: {e}", exc_info=True)
                return False

        download_successful = await asyncio.to_thread(_sync_download_task)

        if download_successful and os.path.exists(output_path) and os.path.getsize(output_path) > 0:
            await status_message.edit_text("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®! ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... üì§")
            await message.reply_document(
                document=output_path,
                caption=f"**‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®! ‚úÖ**\n\n‡¶≤‡¶ø‡¶ô‡ßç‡¶ï: `{m3u8_url}`"
            )
            os.remove(output_path)
            logger.info(f"Downloaded file deleted: {output_path}")
        else:
            if status_message:
                await status_message.edit_text("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡¶ø‡•§ ‚ùå")
            logger.warning(f"Video download failed or file is empty: {m3u8_url}")

    except Exception as e:
        error_message = f"‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {e}\n\n```python\n{traceback.format_exc()}\n```"
        logger.error(f"Unexpected error in download function for {m3u8_url}: {e}", exc_info=True)
        if status_message:
            await status_message.edit_text(error_message)

# --- Pyrogram ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
# ‡¶è‡¶á ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡ßá‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡¶æ‡¶∞‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡¶¨‡ßá
# ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡ßá ‡¶Ü‡¶∏‡¶≤ ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§
# ‡¶è‡¶ü‡¶ø Pyrogram ‡¶è‡¶∞ ‡¶°‡ßá‡¶ï‡ßã‡¶∞‡ßá‡¶ü‡¶∞ ‡¶∏‡¶ø‡¶®‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º‡•§
temp_bot_client = Client("temp_client", no_updates=True)

@temp_bot_client.on_message(filters.command("start") & filters.private)
async def start_command(client, message):
    logger.info(f"Received /start command from {message.from_user.id}")
    await message.reply_text("üëã **‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã!** ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø m3u8 ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ü‡•§\n\n‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø **m3u8 ‡¶≤‡¶ø‡¶Ç‡¶ï** ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶Æ‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡ßá‡¶¨‡•§")

@temp_bot_client.on_message(filters.text & filters.private)
async def handle_any_text_message(client, message: Message):
    m3u8_url = message.text.strip()
    logger.info(f"Received text message from {message.from_user.id}: {m3u8_url}")

    if re.match(r'https?://.*\.(m3u8|M3U8)$', m3u8_url, re.IGNORECASE):
        await download_m3u8_video(client, message, m3u8_url)
    else:
        await message.reply_text("ü§î ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß m3u8 ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¨‡¶≤‡ßá ‡¶Æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§\n\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø **‡¶∏‡¶†‡¶ø‡¶ï m3u8 ‡¶≤‡¶ø‡¶Ç‡¶ï** ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")

# --- ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá) ---
def run_pyrogram_bot():
    """
    Pyrogram ‡¶¨‡¶ü‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶∏ ‡¶≤‡ßÅ‡¶™‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶Ø‡¶º‡•§
    """
    # ‡¶è‡¶á ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® asyncio ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡ßÅ‡¶™ ‡¶§‡ßà‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    global pyrogram_client # ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ pyrogram_client ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

    try:
        # Pyrogram ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
        pyrogram_client = Client(
            "m3u8_downloader_bot",
            api_id=API_ID,
            api_hash=API_HASH,
            bot_token=BOT_TOKEN
        )

        # temp_bot_client ‡¶•‡ßá‡¶ï‡ßá ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶Ü‡¶∏‡¶≤ pyrogram_client ‡¶è ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
        # Pyrogram 2.x ‡¶è‡¶∞ ‡¶°‡¶ø‡¶∏‡¶™‡ßç‡¶Ø‡¶æ‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶†‡¶æ‡¶Æ‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§
        for group_id in temp_bot_client.dispatcher.handlers:
            for handler in temp_bot_client.dispatcher.handlers[group_id]:
                pyrogram_client.add_handler(handler)
        
        logger.info("Pyrogram ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        loop.run_until_complete(pyrogram_client.start())
        logger.info("Pyrogram ‡¶¨‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        loop.run_forever() # ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡ßÅ‡¶™‡¶ï‡ßá ‡¶Ö‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü‡¶ï‡¶æ‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá
    except Exception as e:
        logger.error(f"‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}", exc_info=True)
    finally:
        logger.info("Pyrogram ‡¶¨‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        if pyrogram_client and pyrogram_client.is_connected:
            loop.run_until_complete(pyrogram_client.stop())
        loop.close()
        logger.info("Pyrogram ‡¶¨‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

# --- Flask ‡¶∞‡ßÅ‡¶ü‡¶∏ ---
@app.route('/')
def home():
    bot_status = "‡¶ö‡¶≤‡¶õ‡ßá" if pyrogram_client and pyrogram_client.is_connected else "‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø/‡¶¨‡¶®‡ßç‡¶ß ‡¶Ü‡¶õ‡ßá"
    return f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Pyrogram ‡¶¨‡¶ü ‡¶è‡¶¨‡¶Ç Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶∏‡¶ö‡¶≤ ‡¶Ü‡¶õ‡ßá! ‡¶¨‡¶ü ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá: {bot_status}‡•§ ‡¶è‡¶ï‡¶ü‡¶ø m3u8 ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§"

@app.route('/health')
def health_check():
    if pyrogram_client and pyrogram_client.is_connected:
        return "OK", 200
    else:
        return "Bot Not Connected", 503

# --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ---
if __name__ == '__main__':
    # Pyrogram ‡¶¨‡¶ü‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®
    # daemon=True ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶Æ‡ßÇ‡¶≤ Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶≤‡ßá ‡¶è‡¶ü‡¶ø‡¶ì ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶Ø‡¶º‡•§
    bot_thread = threading.Thread(target=run_pyrogram_bot, daemon=True)
    bot_thread.start()

    # Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®
    # "0.0.0.0" ‡¶è ‡¶ö‡¶æ‡¶≤‡¶æ‡¶® ‡¶Ø‡¶æ‡¶§‡ßá ‡¶è‡¶ü‡¶ø ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶®‡¶ï‡¶æ‡¶Æ‡¶ø‡¶Ç ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡ßá‡•§
    port = int(os.getenv("PORT", 10000))
    logger.info(f"Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶™‡ßã‡¶∞‡ßç‡¶ü {port} ‡¶è ‡¶ö‡¶≤‡¶õ‡ßá...")
    app.run(host='0.0.0.0', port=port)

