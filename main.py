import os
import threading
import subprocess
import logging # ‚úÖ ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
from flask import Flask
from pyrogram import Client, filters
from pyrogram.types import Message
from dotenv import load_dotenv # ‚úÖ .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂ ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

# .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂ ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
load_dotenv()

# -------------------- Configuration --------------------
# ‚úÖ ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂ ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Ç‡¶¨‡ßá‡¶¶‡¶®‡¶∂‡ßÄ‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")

DOWNLOAD_DIR = "./downloads"

# ‚úÖ ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[
                        logging.FileHandler("bot.log"),
                        logging.StreamHandler()
                    ])
logger = logging.getLogger(__name__)


# -------------------- Flask App --------------------
flask_app = Flask(__name__)

@flask_app.route("/")
def home():
    return "‚úÖ M3U8 Downloader Bot is Running!"

# -------------------- Pyrogram Bot --------------------
bot = Client(
    "m3u8_downloader_bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

@bot.on_message(filters.private & filters.text)
async def m3u8_handler(client: Client, message: Message):
    url = message.text.strip()
    user_id = message.from_user.id

    if not url.endswith(".m3u8"):
        await message.reply("‚ö†Ô∏è ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß `.m3u8` ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")
        logger.info(f"Invalid M3U8 link received from {user_id}: {url}")
        return

    initial_message = await message.reply("üì• ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    logger.info(f"Starting download for {user_id} from URL: {url}")

    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    # ‚úÖ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ ‡¶∏‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶ü‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá (‡¶Ø‡¶¶‡¶ø‡¶ì user_id ‡¶è‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶)
    output_filename = f"{user_id}_{os.path.basename(urlparse(url).path).replace('.', '_')}.mp4"
    output_file = os.path.join(DOWNLOAD_DIR, output_filename)

    cmd = [
        "ffmpeg",
        "-i", url,
        "-c", "copy",
        "-bsf:a", "aac_adtstoasc",
        "-y",  # overwrite if exists
        output_file
    ]

    try:
        # ‚úÖ subprocess.run ‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡ßá asyncio.create_subprocess_exec ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
        # ‡¶§‡¶¨‡ßá ‡¶∏‡¶∞‡¶≤‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø subprocess.run ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
        # ‡¶¶‡ßÄ‡¶∞‡ßç‡¶ò ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶®-‡¶¨‡ßç‡¶≤‡¶ï‡¶ø‡¶Ç ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§
        process = subprocess.run(cmd, capture_output=True, text=True, check=True)
        logger.info(f"Successfully downloaded video for {user_id}. Output: {process.stdout}")
        await initial_message.edit_text("‚úÖ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...") # ‚úÖ ‡¶Ü‡¶™‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏
        await message.reply_video(video=output_file, caption="‚úÖ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∞‡ßá‡¶°‡¶ø!")

    except subprocess.CalledProcessError as e:
        error_message = f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡¶ø‡¶®‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§: {e.stderr}"
        await initial_message.edit_text(error_message)
        logger.error(f"Download failed for {user_id} from {url}. Error: {e.stderr}")
    except Exception as e:
        error_message = "‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        await initial_message.edit_text(error_message)
        logger.error(f"An unexpected error occurred for {user_id} from {url}. Error: {e}")
    finally:
        if os.path.exists(output_file):
            os.remove(output_file)
            logger.info(f"Cleaned up file: {output_file}")


# -------------------- Run Both --------------------
def run_flask():
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"Flask app running on port {port}")
    flask_app.run(host="0.0.0.0", port=port)

def run_bot():
    logger.info("Pyrogram bot started")
    bot.run()

if __name__ == "__main__":
    # ‚úÖ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    # ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡¶®, Pyrogram async ‡¶π‡¶≤‡ßá‡¶ì Flask ‡¶è‡¶ñ‡¶æ‡¶®‡ßá blocking.
    # ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá, asyncio-based web framework (‡¶Ø‡ßá‡¶Æ‡¶® FastAPI/Quart) ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§
    threading.Thread(target=run_bot).start()
    run_flask()
